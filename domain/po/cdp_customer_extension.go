//Package po generated by 'freedom new-po'
package po

import (
	"gorm.io/datatypes"
	"time"
)

// CustomerExtension .
type CustomerExtension struct {
	changes map[string]interface{}
	ID      int            `gorm:"primaryKey;column:id"`
	UserID  string         `gorm:"column:userId"`
	Data    datatypes.JSON `gorm:"column:data"` // 扩展数据
	Created time.Time      `gorm:"column:created"`
	Updated time.Time      `gorm:"column:updated"`
}

// TableName .
func (obj *CustomerExtension) TableName() string {
	return "cdp_customer_extension"
}

// Location .
func (obj *CustomerExtension) Location() map[string]interface{} {
	return map[string]interface{}{"id": obj.ID}
}

// GetChanges .
func (obj *CustomerExtension) GetChanges() map[string]interface{} {
	if obj.changes == nil {
		return nil
	}
	result := make(map[string]interface{})
	for k, v := range obj.changes {
		result[k] = v
	}
	obj.changes = nil
	return result
}

// Update .
func (obj *CustomerExtension) Update(name string, value interface{}) {
	if obj.changes == nil {
		obj.changes = make(map[string]interface{})
	}
	obj.changes[name] = value
}

// SetUserID .
func (obj *CustomerExtension) SetUserID(userID string) {
	obj.UserID = userID
	obj.Update("userId", userID)
}

// SetData .
func (obj *CustomerExtension) SetData(data datatypes.JSON) {
	obj.Data = data
	obj.Update("data", data)
}

// SetCreated .
func (obj *CustomerExtension) SetCreated(created time.Time) {
	obj.Created = created
	obj.Update("created", created)
}

// SetUpdated .
func (obj *CustomerExtension) SetUpdated(updated time.Time) {
	obj.Updated = updated
	obj.Update("updated", updated)
}
