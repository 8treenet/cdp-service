//Package po generated by 'freedom new-po'
package po

import (
	"time"

	"gorm.io/gorm"
)

// Customer .
type Customer struct {
	changes map[string]interface{}
	UserID  int       `gorm:"primaryKey;column:userId" json:"userID"`
	Name    string    `gorm:"column:name" json:"name"`
	Gender  int       `gorm:"column:gender" json:"gender"` // 0未知 1男 2女
	Age     int       `gorm:"column:age" json:"age"`       // 年龄
	Created time.Time `gorm:"column:created" json:"created"`
	Updated time.Time `gorm:"column:updated" json:"updated"`
}

// TableName .
func (obj *Customer) TableName() string {
	return "cdp_customer"
}

// Location .
func (obj *Customer) Location() map[string]interface{} {
	return map[string]interface{}{"userId": obj.UserID}
}

// GetChanges .
func (obj *Customer) GetChanges() map[string]interface{} {
	if obj.changes == nil {
		return nil
	}
	result := make(map[string]interface{})
	for k, v := range obj.changes {
		result[k] = v
	}
	obj.changes = nil
	return result
}

// Update .
func (obj *Customer) Update(name string, value interface{}) {
	if obj.changes == nil {
		obj.changes = make(map[string]interface{})
	}
	obj.changes[name] = value
}

// SetName .
func (obj *Customer) SetName(name string) {
	obj.Name = name
	obj.Update("name", name)
}

// SetGender .
func (obj *Customer) SetGender(gender int) {
	obj.Gender = gender
	obj.Update("gender", gender)
}

// SetAge .
func (obj *Customer) SetAge(age int) {
	obj.Age = age
	obj.Update("age", age)
}

// SetCreated .
func (obj *Customer) SetCreated(created time.Time) {
	obj.Created = created
	obj.Update("created", created)
}

// SetUpdated .
func (obj *Customer) SetUpdated(updated time.Time) {
	obj.Updated = updated
	obj.Update("updated", updated)
}

// AddGender .
func (obj *Customer) AddGender(gender int) {
	obj.Gender += gender
	obj.Update("gender", gorm.Expr("gender + ?", gender))
}

// AddAge .
func (obj *Customer) AddAge(age int) {
	obj.Age += age
	obj.Update("age", gorm.Expr("age + ?", age))
}
