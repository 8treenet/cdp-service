//Package po generated by 'freedom new-po'
package po

import (
	"gorm.io/gorm"
	"time"
)

// CustomerKey .
type CustomerKey struct {
	changes map[string]interface{}
	ID      int       `gorm:"primaryKey;column:id"`
	UserID  int       `gorm:"column:userId"` // 用户userid
	Key     string    `gorm:"column:key"`    // 唯一id
	Created time.Time `gorm:"column:created"`
	Updated time.Time `gorm:"column:updated"`
}

// TableName .
func (obj *CustomerKey) TableName() string {
	return "cdp_customer_key"
}

// Location .
func (obj *CustomerKey) Location() map[string]interface{} {
	return map[string]interface{}{"id": obj.ID}
}

// GetChanges .
func (obj *CustomerKey) GetChanges() map[string]interface{} {
	if obj.changes == nil {
		return nil
	}
	result := make(map[string]interface{})
	for k, v := range obj.changes {
		result[k] = v
	}
	obj.changes = nil
	return result
}

// Update .
func (obj *CustomerKey) Update(name string, value interface{}) {
	if obj.changes == nil {
		obj.changes = make(map[string]interface{})
	}
	obj.changes[name] = value
}

// SetUserID .
func (obj *CustomerKey) SetUserID(userID int) {
	obj.UserID = userID
	obj.Update("userId", userID)
}

// SetKey .
func (obj *CustomerKey) SetKey(key string) {
	obj.Key = key
	obj.Update("key", key)
}

// SetCreated .
func (obj *CustomerKey) SetCreated(created time.Time) {
	obj.Created = created
	obj.Update("created", created)
}

// SetUpdated .
func (obj *CustomerKey) SetUpdated(updated time.Time) {
	obj.Updated = updated
	obj.Update("updated", updated)
}

// AddUserID .
func (obj *CustomerKey) AddUserID(userID int) {
	obj.UserID += userID
	obj.Update("userId", gorm.Expr("userId + ?", userID))
}
