//Package po generated by 'freedom new-po'
package po

import (
	"time"

	"gorm.io/datatypes"
)

// Behaviour .
type Behaviour struct {
	changes   map[string]interface{}
	ID        int            `gorm:"primaryKey;column:id"`
	IPAddr    string         `gorm:"column:ipAddr"`
	EventType string         `gorm:"column:eventType"` // 事件类型
	EventTime time.Time      `gorm:"column:eventTime"` // 事件时间
	EventData datatypes.JSON `gorm:"column:eventData"` // 事件数据
	Created   time.Time      `gorm:"column:created"`
}

// TableName .
func (obj *Behaviour) TableName() string {
	return "cdp_behaviour"
}

// Location .
func (obj *Behaviour) Location() map[string]interface{} {
	return map[string]interface{}{"id": obj.ID}
}

// GetChanges .
func (obj *Behaviour) GetChanges() map[string]interface{} {
	if obj.changes == nil {
		return nil
	}
	result := make(map[string]interface{})
	for k, v := range obj.changes {
		result[k] = v
	}
	obj.changes = nil
	return result
}

// Update .
func (obj *Behaviour) Update(name string, value interface{}) {
	if obj.changes == nil {
		obj.changes = make(map[string]interface{})
	}
	obj.changes[name] = value
}

// SetIPAddr .
func (obj *Behaviour) SetIPAddr(iPAddr string) {
	obj.IPAddr = iPAddr
	obj.Update("ipAddr", iPAddr)
}

// SetEventType .
func (obj *Behaviour) SetEventType(eventType string) {
	obj.EventType = eventType
	obj.Update("eventType", eventType)
}

// SetEventTime .
func (obj *Behaviour) SetEventTime(eventTime time.Time) {
	obj.EventTime = eventTime
	obj.Update("eventTime", eventTime)
}

// SetEventData .
func (obj *Behaviour) SetEventData(eventData datatypes.JSON) {
	obj.EventData = eventData
	obj.Update("eventData", eventData)
}

// SetCreated .
func (obj *Behaviour) SetCreated(created time.Time) {
	obj.Created = created
	obj.Update("created", created)
}
