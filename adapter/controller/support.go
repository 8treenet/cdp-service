//Package controller generated by 'freedom new-project github.com/8treenet/cdp-service'
package controller

import (
	"github.com/8treenet/cdp-service/domain"
	"github.com/8treenet/cdp-service/infra"
	"github.com/8treenet/freedom"
)

func init() {
	freedom.Prepare(func(initiator freedom.Initiator) {
		initiator.BindController("/support", &SupportController{})
	})
}

// SupportController .
type SupportController struct {
	SupportService *domain.SupportService
	Worker         freedom.Worker
	Request        *infra.Request
}

//Get handles the GET: /support/source route.
func (support *SupportController) PostSource() freedom.Result {
	var data struct {
		Source string `json:"source" validate:"required"`
	}
	if e := support.Request.ReadJSON(&data, true); e != nil {
		return &infra.JSONResponse{Error: e}
	}
	if e := support.SupportService.CreateSource(data.Source); e != nil {
		return &infra.JSONResponse{Error: e}
	}

	return &infra.JSONResponse{}
}

//Get handles the GET: /support/sources route.
func (support *SupportController) GetSources() freedom.Result {
	all, e := support.SupportService.GetAllSource()
	if e != nil {
		return &infra.JSONResponse{Error: e}
	}

	objects := make([]struct {
		ID     int    `json:"id"`
		Source string `json:"source"`
	}, len(all))

	for i := 0; i < len(all); i++ {
		objects[i].ID = all[i].ID
		objects[i].Source = all[i].Source
	}
	return &infra.JSONResponse{Object: objects}
}
