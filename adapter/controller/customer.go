//Package controller generated by 'freedom new-project github.com/8treenet/cdp-service'
package controller

import (
	"errors"

	"github.com/8treenet/cdp-service/domain"
	"github.com/8treenet/cdp-service/domain/vo"
	"github.com/8treenet/cdp-service/infra"
	"github.com/8treenet/freedom"
)

func init() {
	freedom.Prepare(func(initiator freedom.Initiator) {
		initiator.BindController("/customers", &CustomerController{})
	})
}

// CustomerController .
type CustomerController struct {
	CustomerService *domain.CustomerService
	Worker          freedom.Worker
	Request         *infra.Request
}

//PutBy handles the PUT: /customers/id:string route.
func (c *CustomerController) PutBy(id string) freedom.Result {
	putData := map[string]interface{}{}
	if e := c.Request.ReadJSON(&putData); e != nil {
		return &infra.JSONResponse{Error: e}
	}
	if e := c.CustomerService.UpdateCustomer(id, putData); e != nil {
		return &infra.JSONResponse{Error: e}
	}
	return &infra.JSONResponse{}
}

//GetBy handles the Get: /customers/id:string route.
func (c *CustomerController) GetBy(id string) freedom.Result {
	data, e := c.CustomerService.GetCustomer(id)
	if e != nil {
		return &infra.JSONResponse{Error: e}
	}
	return &infra.JSONResponse{Object: data}
}

//GetList handles the Get: /customers/list route.
func (c *CustomerController) GetList() freedom.Result {
	return &infra.JSONResponse{Object: ""}
}

//Post handles the Get: /customers route.
func (c *CustomerController) Post() freedom.Result {
	var postData vo.CustomerDTO
	if e := c.Request.ReadJSON(&postData); e != nil {
		return &infra.JSONResponse{Error: e}
	}
	if postData.Key == "" && postData.Phone == "" && postData.WechatUnionID == "" {
		return &infra.JSONResponse{Error: errors.New("未填写客户识别参数")}
	}

	if e := c.CustomerService.CreateCustomer(postData); e != nil {
		return &infra.JSONResponse{Error: e}
	}
	return &infra.JSONResponse{}
}

//PostList handles the Get: /customers/list route.
func (c *CustomerController) PostList() freedom.Result {
	var postData []vo.CustomerDTO
	if e := c.Request.ReadJSON(&postData); e != nil {
		return &infra.JSONResponse{Error: e}
	}

	if e := c.CustomerService.CreateCustomers(postData); e != nil {
		return &infra.JSONResponse{Error: e}
	}
	return &infra.JSONResponse{}
}

//DeleteBy handles the delete: /customers route.
func (c *CustomerController) Delete() freedom.Result {
	var query struct {
		ID []string `url:"id" validate:"required"` //Support array parameters
	}
	if err := c.Request.ReadQuery(&query, true); err != nil {
		return &infra.JSONResponse{Error: err}
	}

	if e := c.CustomerService.DeleteCustomer(query.ID); e != nil {
		return &infra.JSONResponse{Error: e}
	}
	return &infra.JSONResponse{}
}
