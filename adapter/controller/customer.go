//Package controller generated by 'freedom new-project github.com/8treenet/cdp-service'
package controller

import (
	"errors"

	"github.com/8treenet/cdp-service/domain"
	"github.com/8treenet/cdp-service/domain/vo"
	"github.com/8treenet/cdp-service/infra"
	"github.com/8treenet/freedom"
)

func init() {
	freedom.Prepare(func(initiator freedom.Initiator) {
		initiator.BindController("/customers", &CustomerController{})
	})
}

// CustomerController .
type CustomerController struct {
	CustomerService *domain.CustomerService
	Worker          freedom.Worker
	Request         *infra.Request
	Common          *infra.CommonRequest
}

//PutBy handles the PUT: /customers/id:string route.
func (c *CustomerController) PutBy(id string) freedom.Result {
	putData := map[string]interface{}{}
	if e := c.Request.ReadJSON(&putData); e != nil {
		return &infra.JSONResponse{Error: e}
	}
	if e := c.CustomerService.UpdateCustomer(id, putData); e != nil {
		return &infra.JSONResponse{Error: e}
	}
	return &infra.JSONResponse{}
}

//GetBy handles the Get: /customers/id:string route.
func (c *CustomerController) GetBy(id string) freedom.Result {
	data, e := c.CustomerService.GetCustomer(id)
	if e != nil {
		return &infra.JSONResponse{Error: e}
	}
	return &infra.JSONResponse{Object: data}
}

//GetList handles the Get: /customers/list route.
func (c *CustomerController) GetList() freedom.Result {
	list, total, e := c.CustomerService.GetCustomersByPage()
	if e != nil {
		return &infra.JSONResponse{Error: e}
	}

	page, pageSize := c.Common.GetPage()
	pageData := infra.PageResponse{
		List:     list,
		Total:    total,
		Page:     page,
		PageSize: pageSize,
	}
	return &infra.JSONResponse{Object: pageData}
}

//Post handles the Get: /customers route.
func (c *CustomerController) Post() freedom.Result {
	var postData vo.CustomerDTO
	if e := c.Request.ReadJSON(&postData); e != nil {
		return &infra.JSONResponse{Error: e}
	}
	if postData.UserKey == "" && postData.Phone == "" && postData.WechatUnionID == "" {
		return &infra.JSONResponse{Error: errors.New("未填写客户识别参数")}
	}

	if e := c.CustomerService.CreateCustomer(postData); e != nil {
		return &infra.JSONResponse{Error: e}
	}
	return &infra.JSONResponse{}
}

//PostList handles the Get: /customers/list route.
func (c *CustomerController) PostList() freedom.Result {
	var postData []vo.CustomerDTO
	if e := c.Request.ReadJSON(&postData); e != nil {
		return &infra.JSONResponse{Error: e}
	}
	for _, v := range postData {
		if v.UserKey == "" && v.Phone == "" && v.WechatUnionID == "" {
			return &infra.JSONResponse{Error: errors.New("未填写客户识别参数")}
		}
	}
	if e := c.CustomerService.CreateCustomers(postData); e != nil {
		return &infra.JSONResponse{Error: e}
	}
	return &infra.JSONResponse{}
}

//DeleteBy handles the delete: /customers route.
func (c *CustomerController) Delete() freedom.Result {
	var query struct {
		ID []string `url:"userId" validate:"required"` //Support array parameters
	}

	if err := c.Request.ReadQuery(&query, true); err != nil {
		return &infra.JSONResponse{Error: err}
	}

	if e := c.CustomerService.DeleteCustomer(query.ID); e != nil {
		return &infra.JSONResponse{Error: e}
	}
	return &infra.JSONResponse{}
}

//GetKey handles the Get: /customers/key route.
func (c *CustomerController) GetKey() freedom.Result {
	var query struct {
		UserKey []string `url:"userKey" validate:"required"` //Support array parameters
	}
	if err := c.Request.ReadQuery(&query, true); err != nil {
		return &infra.JSONResponse{Error: err}
	}

	if len(query.UserKey) == 0 || len(query.UserKey) > 1000 {
		return &infra.JSONResponse{Error: errors.New("key数组必须大于0和小等于1000")}
	}

	list, err := c.CustomerService.GetCustomersByKeys(query.UserKey)
	if err != nil {
		return &infra.JSONResponse{Error: err}
	}
	return &infra.JSONResponse{Object: list}
}

//GetPhone handles the Get: /customers/phone route.
func (c *CustomerController) GetPhone() freedom.Result {
	var query struct {
		Phone []string `url:"phone" validate:"required"` //Support array parameters
	}
	if err := c.Request.ReadQuery(&query, true); err != nil {
		return &infra.JSONResponse{Error: err}
	}

	if len(query.Phone) == 0 || len(query.Phone) > 1000 {
		return &infra.JSONResponse{Error: errors.New("phone数组必须大于0和小等于1000")}
	}

	list, err := c.CustomerService.GetCustomersByPhone(query.Phone)
	if err != nil {
		return &infra.JSONResponse{Error: err}
	}
	return &infra.JSONResponse{Object: list}
}

//GetWechat handles the Get: /customers/wechat route.
func (c *CustomerController) GetWechat() freedom.Result {
	var query struct {
		UnionId []string `url:"unionId" validate:"required"` //Support array parameters
	}
	if err := c.Request.ReadQuery(&query, true); err != nil {
		return &infra.JSONResponse{Error: err}
	}

	if len(query.UnionId) == 0 || len(query.UnionId) > 1000 {
		return &infra.JSONResponse{Error: errors.New("phone数组必须大于0和小等于1000")}
	}

	list, err := c.CustomerService.GetCustomersByWechat(query.UnionId)
	if err != nil {
		return &infra.JSONResponse{Error: err}
	}
	return &infra.JSONResponse{Object: list}
}
